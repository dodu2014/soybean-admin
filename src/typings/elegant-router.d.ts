/* eslint-disable */
/* prettier-ignore */
// biome-ignore lint: disable
// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router

declare module "@elegant-router/types" {
  type RouteRecordSingleView = import("vue-router").RouteRecordSingleView;
  type RouteRecordRedirect = import("vue-router").RouteRecordRedirect;
  type RouteComponent = import("vue-router").RouteComponent;

  type Lazy<T> = () => Promise<T>;

  export type RawRouteComponent = RouteComponent | Lazy<RouteComponent>;

  /**
   * route layout key
   */
  export type RouteLayoutKey = "base" | "blank";

  /**
   * route path map
   */
  export type RoutePathMap = {
    "Root": "/";
    "NotFound": "/:pathMatch(.*)*";
    "403": "/403";
    "404": "/404";
    "500": "/500";
    "About": "/about";
    "AlovaRequest": "/alova/request";
    "AlovaScenes": "/alova/scenes";
    "DocumentAlova": "/document/alova";
    "DocumentAntd": "/document/antd";
    "DocumentNaive": "/document/naive";
    "DocumentProject": "/document/project";
    "DocumentProjectLink": "/document/project-link";
    "DocumentProNaive": "/document/pro-naive";
    "DocumentUnocss": "/document/unocss";
    "DocumentVideo": "/document/video";
    "DocumentVite": "/document/vite";
    "DocumentVue": "/document/vue";
    "Exception403": "/exception/403";
    "Exception404": "/exception/404";
    "Exception500": "/exception/500";
    "FunctionMultiTab": "/function/multi-tab";
    "FunctionRequest": "/function/request";
    "FunctionSuperPage": "/function/super-page";
    "FunctionTab": "/function/tab";
    "FunctionToggleAuth": "/function/toggle-auth";
    "Home": "/home";
    "IframePageUrl": "/iframe-page/:url";
    "Login": "/login/:module(pwd-login|code-login|register|reset-pwd|bind-wechat)?";
    "ManageMenu": "/manage/menu";
    "ManageRole": "/manage/role";
    "ManageUser": "/manage/user";
    "ManageUserDetailId": "/manage/user-detail/:id";
    "PluginBarcode": "/plugin/barcode";
    "PluginChartsAntv": "/plugin/charts/antv";
    "PluginChartsEcharts": "/plugin/charts/echarts";
    "PluginChartsVchart": "/plugin/charts/vchart";
    "PluginCopy": "/plugin/copy";
    "PluginEditorMarkdown": "/plugin/editor/markdown";
    "PluginEditorQuill": "/plugin/editor/quill";
    "PluginExcel": "/plugin/excel";
    "PluginGanttDhtmlx": "/plugin/gantt/dhtmlx";
    "PluginGanttVtable": "/plugin/gantt/vtable";
    "PluginIcon": "/plugin/icon";
    "PluginMap": "/plugin/map";
    "PluginPdf": "/plugin/pdf";
    "PluginPinyin": "/plugin/pinyin";
    "PluginPrint": "/plugin/print";
    "PluginSwiper": "/plugin/swiper";
    "PluginTablesVtable": "/plugin/tables/vtable";
    "PluginTypeit": "/plugin/typeit";
    "PluginVideo": "/plugin/video";
    "ProNaiveConfigProvider": "/pro-naive/ConfigProvider";
    "ProNaiveFormBasic": "/pro-naive/form/basic";
    "ProNaiveFormQuery": "/pro-naive/form/query";
    "ProNaiveFormStep": "/pro-naive/form/step";
    "ProNaiveTableRemote": "/pro-naive/table/remote";
    "ProNaiveTableRowEdit": "/pro-naive/table/row-edit";
    "UserCenter": "/user-center";
    "Wip": "/wip";
  };

  /**
   * route key
   */
  export type RouteKey = keyof RoutePathMap;

  /**
   * route path
   */
  export type RoutePath = RoutePathMap[RouteKey];

  /**
   * root route key
   */
  export type RootRouteKey = 'Root';

  /**
   * not found route key
   */
  export type NotFoundRouteKey = 'NotFound';

  /**
   * builtin route key
   */
  export type BuiltinRouteKey = RootRouteKey | NotFoundRouteKey;

  /**
   * reuse route key
   */
  export type ReuseRouteKey = Extract<
    RouteKey,
    | "DocumentAlova"
    | "DocumentAntd"
    | "DocumentNaive"
    | "DocumentProject"
    | "DocumentProjectLink"
    | "DocumentProNaive"
    | "DocumentUnocss"
    | "DocumentVideo"
    | "DocumentVite"
    | "DocumentVue"
    | "Exception403"
    | "Exception404"
    | "Exception500"
  >;

  /**
   * the route file key, which has it's own file
   */
  export type RouteFileKey = Exclude<RouteKey, BuiltinRouteKey | ReuseRouteKey>;

  /**
   * mapped name and path
   */
  type MappedNamePath = {
    [K in RouteKey]: { name: K; path: RoutePathMap[K] };
  }[RouteKey];

  /**
   * auto router single view
   */
  export type AutoRouterSingleView = Omit<RouteRecordSingleView, 'component' | 'name' | 'path'> & {
    component: RouteFileKey;
    layout: RouteLayoutKey;
  } & MappedNamePath;

  /**
   * auto router redirect
   */
  export type AutoRouterRedirect = Omit<RouteRecordRedirect, 'children' | 'name' | 'path'> & MappedNamePath;

  /**
   * auto router route
   */
  export type AutoRouterRoute = AutoRouterSingleView | AutoRouterRedirect;
}
